#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <openssl/rsa.h>
#include <openssl/pem.h>

#define MESSAGE "Hello, RSA!"

int main() {
    // Initialize OpenSSL
    OpenSSL_add_all_algorithms();

    // Generate RSA key pair
    RSA *rsa_keypair = RSA_generate_key(2048, 65537, NULL, NULL);
    if (!rsa_keypair) {
        fprintf(stderr, "Error generating RSA key pair.\n");
        exit(EXIT_FAILURE);
    }

    // Get public and private keys
    const BIGNUM *n, *e, *d;
    RSA_get0_key(rsa_keypair, &n, &e, &d);

    // Display public and private keys
    printf("Public key (n, e): %s, %s\n",
           BN_bn2hex(n), BN_bn2hex(e));
    printf("Private key (n, d): %s, %s\n",
           BN_bn2hex(n), BN_bn2hex(d));

    // Encrypt the message using the public key
    size_t encrypted_length;
    unsigned char *encrypted_message = (unsigned char *)malloc(RSA_size(rsa_keypair));
    if (RSA_public_encrypt(strlen(MESSAGE) + 1, (unsigned char *)MESSAGE, encrypted_message,
                           rsa_keypair, RSA_PKCS1_PADDING) == -1) {
        fprintf(stderr, "Error encrypting the message.\n");
        exit(EXIT_FAILURE);
    }

    // Display the encrypted message
    printf("Encrypted message: ");
    for (size_t i = 0; i < RSA_size(rsa_keypair); i++) {
        printf("%02x", encrypted_message[i]);
    }
    printf("\n");

    // Decrypt the message using the private key
    unsigned char *decrypted_message = (unsigned char *)malloc(RSA_size(rsa_keypair));
    if (RSA_private_decrypt(RSA_size(rsa_keypair), encrypted_message, decrypted_message,
                            rsa_keypair, RSA_PKCS1_PADDING) == -1) {
        fprintf(stderr, "Error decrypting the message.\n");
        exit(EXIT_FAILURE);
    }

    // Display the decrypted message
    printf("Decrypted message: %s\n", decrypted_message);

    // Free allocated memory
    free(encrypted_message);
    free(decrypted_message);
    RSA_free(rsa_keypair);

    return 0;
}
