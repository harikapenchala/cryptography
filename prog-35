#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

// Function to perform Vigenere encryption using a one-time pad
void vigenereEncrypt(const char *plaintext, const char *key, char *ciphertext) {
    int length = strlen(plaintext);

    for (int i = 0; i < length; i++) {
        if (isalpha(plaintext[i])) {
            int shift = tolower(key[i]) - 'a';
            char base = islower(plaintext[i]) ? 'a' : 'A';
            ciphertext[i] = (plaintext[i] - base + shift) % 26 + base;
        } else {
            // Non-alphabetic characters remain unchanged
            ciphertext[i] = plaintext[i];
        }
    }
    ciphertext[length] = '\0'; // Null-terminate the string
}

int main() {
    // Example plaintext and key
    const char *plaintext = "HelloWorld";
    const char *key = "XyZaBcDe";

    // Ensure the key length is the same as the plaintext length
    int plaintextLength = strlen(plaintext);
    int keyLength = strlen(key);
    if (keyLength != plaintextLength) {
        fprintf(stderr, "Error: Key length must be the same as plaintext length.\n");
        return 1;
    }

    // Allocate memory for the ciphertext
    char *ciphertext = (char *)malloc(plaintextLength + 1); // +1 for null-terminator

    // Perform Vigenere encryption
    vigenereEncrypt(plaintext, key, ciphertext);

    // Display the results
    printf("Plaintext: %s\n", plaintext);
    printf("Key: %s\n", key);
    printf("Ciphertext: %s\n", ciphertext);

    // Free allocated memory
    free(ciphertext);

    return 0;
}
OUTPUT :
Key length must be the same as plaintext length.
