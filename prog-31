#include <stdio.h>
#include <string.h>

// Block size in bytes (assuming AES block size)
#define BLOCK_SIZE 16

// Function to perform XOR operation on two blocks
void xorBlocks(unsigned char *result, const unsigned char *block1, const unsigned char *block2) {
    for (int i = 0; i < BLOCK_SIZE; i++) {
        result[i] = block1[i] ^ block2[i];
    }
}

// Function to perform AES encryption on a block
void aesEncrypt(const unsigned char *input, const unsigned char *key, unsigned char *output) {
    // This function needs to be replaced with a proper AES encryption function
    // from a cryptographic library like OpenSSL.
    // For simplicity, let's assume AES is just an XOR operation in this example.
    xorBlocks(output, input, key);
}

// Function to generate subkeys for CMAC
void generateSubkeys(const unsigned char *key, unsigned char *subkey1, unsigned char *subkey2) {
    unsigned char L[BLOCK_SIZE];
    unsigned char Z[BLOCK_SIZE];

    // Initialize L and Z
    memset(L, 0, BLOCK_SIZE);
    memset(Z, 0, BLOCK_SIZE);

    // Calculate subkey 1
    aesEncrypt(Z, key, subkey1);

    // Left shift the result
    for (int i = 0; i < BLOCK_SIZE; i++) {
        L[i] = (subkey1[i] << 1) | (i > 0 && (subkey1[i - 1] & 0x80) ? 1 : 0);
    }

    // If MSB of subkey1 is 0, subkey2 is the left-shifted subkey1
    if ((subkey1[0] & 0x80) == 0) {
        memcpy(subkey2, L, BLOCK_SIZE);
    } else {
        // Otherwise, subkey2 is the result of XORing L with a constant
        unsigned char R = 0x87; // R is a constant (0x87) for AES
        xorBlocks(subkey2, L, &R);
    }
}

int main() {
    // Example key
    unsigned char key[BLOCK_SIZE] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
                                     0xab, 0xf7, 0x97, 0x75, 0x46, 0x49, 0x9a, 0x31};

    // Subkey generation
    unsigned char subkey1[BLOCK_SIZE];
    unsigned char subkey2[BLOCK_SIZE];
    generateSubkeys(key, subkey1, subkey2);

    // Display subkeys
    printf("Subkey 1: ");
    for (int i = 0; i < BLOCK_SIZE; i++) {
        printf("%02X ", subkey1[i]);
    }
    printf("\n");

    printf("Subkey 2: ");
    for (int i = 0; i < BLOCK_SIZE; i++) {
        printf("%02X ", subkey2[i]);
    }
    printf("\n");

    return 0;
}

OUTPUT :
Subkey 1: 2B 7E 15 16 28 AE D2 A6 AB F7 97 75 46 49 9A 31 
Subkey 2: 56 FC 2A 2C 50 5C A5 4D 57 EF 2F EB 8C 92 34 63 
